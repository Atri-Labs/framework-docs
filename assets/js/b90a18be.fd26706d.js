"use strict";(self.webpackChunkatriframework=self.webpackChunkatriframework||[]).push([[3484],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),h=n,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||i;return r?a.createElement(m,o(o({ref:t},p),{},{components:r})):a.createElement(m,o({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4522:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const i={title:"Parse Charts Data",description:"A function to generate data for Atri chart instances"},o=void 0,s={unversionedId:"utilities/chart-data-utils/parse-charts-data",id:"version-0.0.90/utilities/chart-data-utils/parse-charts-data",title:"Parse Charts Data",description:"A function to generate data for Atri chart instances",source:"@site/versioned_docs/version-0.0.90/utilities/chart-data-utils/parse-charts-data.md",sourceDirName:"utilities/chart-data-utils",slug:"/utilities/chart-data-utils/parse-charts-data",permalink:"/utilities/chart-data-utils/parse-charts-data",draft:!1,editUrl:"https://github.com/Atri-Labs/framework-docs/tree/main/versioned_docs/version-0.0.90/utilities/chart-data-utils/parse-charts-data.md",tags:[],version:"0.0.90",frontMatter:{title:"Parse Charts Data",description:"A function to generate data for Atri chart instances"},sidebar:"docs",previous:{title:"Draw a chart",permalink:"/utilities/chart-data-utils/draw-chart"},next:{title:"Image",permalink:"/category/image"}},c={},l=[{value:"1. Make sure atri-utils is imported on the top as:",id:"1-make-sure-atri-utils-is-imported-on-the-top-as",level:3},{value:"2. Use the following code in the main.py file to generate the required data.",id:"2-use-the-following-code-in-the-mainpy-file-to-generate-the-required-data",level:3}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"parse_charts_data")," function can be used to convert your DataFrame data to the format which is accepted by the Atri chart instances.\nThe data can be generated accordingly for each chart by passing the ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," parameter accordingly."),(0,n.kt)("p",null,"For example, you want the data for a Bar chart in the format accepted by the Atri instance, you can do it by following 2 simple steps:-"),(0,n.kt)("h3",{id:"1-make-sure-atri-utils-is-imported-on-the-top-as"},"1. Make sure atri-utils is imported on the top as:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from atri_utils import *\n")),(0,n.kt)("h3",{id:"2-use-the-following-code-in-the-mainpy-file-to-generate-the-required-data"},"2. Use the following code in the main.py file to generate the required data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def init_state(at: Atri):\n    \n    # For Bar Chart\n    at.BarChart.custom.data = parse_charts_data(pd.DataFrame, type='bar', x='price')\n    \n    # Here x is optional parameter referring to the column name of the column to be plotted on the x-axis.\n    # If you are not passing the x parameter make sure the column name of the column to be plotted on the x-axis is 'x'.\n\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"The above example only refers to using the function for BarChart, but it can be used for all sorts of charts offered in the Atri Engine.\nThis can be done by passing the ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," parameter accordingly.")))}u.isMDXComponent=!0}}]);